//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClient.Tick {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Tick.ICurrencyResultSummaries", CallbackContract=typeof(WcfClient.Tick.ICurrencyResultSummariesCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICurrencyResultSummaries {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyResultSummaries/GetResultSummaries")]
        void GetResultSummaries(int summariesAmount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyResultSummaries/GetResultSummaries")]
        System.Threading.Tasks.Task GetResultSummariesAsync(int summariesAmount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyResultSummariesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyResultSummaries/GetResultSummariesResult")]
        void GetResultSummariesResult(WcfCallbackServiceContract.APIConnection.ResultSummary[] summaries);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyResultSummariesChannel : WcfClient.Tick.ICurrencyResultSummaries, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyResultSummariesClient : System.ServiceModel.DuplexClientBase<WcfClient.Tick.ICurrencyResultSummaries>, WcfClient.Tick.ICurrencyResultSummaries {
        
        public CurrencyResultSummariesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CurrencyResultSummariesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CurrencyResultSummariesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyResultSummariesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyResultSummariesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetResultSummaries(int summariesAmount) {
            base.Channel.GetResultSummaries(summariesAmount);
        }
        
        public System.Threading.Tasks.Task GetResultSummariesAsync(int summariesAmount) {
            return base.Channel.GetResultSummariesAsync(summariesAmount);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Tick.ICurrencyTickProvider", CallbackContract=typeof(WcfClient.Tick.ICurrencyTickProviderCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICurrencyTickProvider {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyTickProvider/GetTick")]
        void GetTick(string firstCurrency, string secondCurrency);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyTickProvider/GetTick")]
        System.Threading.Tasks.Task GetTickAsync(string firstCurrency, string secondCurrency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyTickProviderCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICurrencyTickProvider/GetTickResult")]
        void GetTickResult(WcfCallbackServiceContract.APIConnection.CurrencyTick tick);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyTickProviderChannel : WcfClient.Tick.ICurrencyTickProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyTickProviderClient : System.ServiceModel.DuplexClientBase<WcfClient.Tick.ICurrencyTickProvider>, WcfClient.Tick.ICurrencyTickProvider {
        
        public CurrencyTickProviderClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CurrencyTickProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CurrencyTickProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyTickProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyTickProviderClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetTick(string firstCurrency, string secondCurrency) {
            base.Channel.GetTick(firstCurrency, secondCurrency);
        }
        
        public System.Threading.Tasks.Task GetTickAsync(string firstCurrency, string secondCurrency) {
            return base.Channel.GetTickAsync(firstCurrency, secondCurrency);
        }
    }
}
